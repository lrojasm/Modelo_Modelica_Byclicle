package Modelo_Secuencial_Bycicle

  model Record_Data
    parameter Modelica.Blocks.Interfaces.RealInput Cdrag annotation(
      Placement(visible = true, transformation(origin = {-114, 128}, extent = {{-20, -20}, {20, 20}}, rotation = 0), iconTransformation(origin = {-114, 128}, extent = {{-20, -20}, {20, 20}}, rotation = 0)));
    parameter Modelica.Blocks.Interfaces.RealInput Density annotation(
      Placement(visible = true, transformation(origin = {-114, 88}, extent = {{-20, -20}, {20, 20}}, rotation = 0), iconTransformation(origin = {-114, 74}, extent = {{-20, -20}, {20, 20}}, rotation = 0)));
  equation

    annotation(
      Icon(coordinateSystem(extent = {{-200, -200}, {200, 200}})),
      Diagram(coordinateSystem(extent = {{-200, -200}, {200, 200}})));
  end Record_Data;

  model PowerD
    annotation(
      Icon(coordinateSystem(extent = {{-200, -200}, {200, 200}})),
      Diagram(coordinateSystem(extent = {{-200, -200}, {200, 200}})));
  end PowerD;

  model Chasis
    annotation(
      Icon(coordinateSystem(extent = {{-200, -200}, {200, 200}})),
      Diagram(coordinateSystem(extent = {{-200, -200}, {200, 200}})));
  end Chasis;

  model Tires
  Modelica.Electrical.Analog.Basic.Resistor resistor1 annotation(
      Placement(visible = true, transformation(origin = {-123, 89}, extent = {{-17, -17}, {17, 17}}, rotation = 0)));
  Modelica.Electrical.Analog.Basic.Inductor inductor1 annotation(
      Placement(visible = true, transformation(origin = {-44, 88}, extent = {{-16, -16}, {16, 16}}, rotation = 0)));
  Modelica.Electrical.Analog.Basic.EMF emf annotation(
      Placement(visible = true, transformation(origin = {16, 22}, extent = {{-34, -34}, {34, 34}}, rotation = 0)));
  Modelica.Mechanics.Rotational.Components.Inertia inertia1 annotation(
      Placement(visible = true, transformation(origin = {113, 21}, extent = {{-17, -17}, {17, 17}}, rotation = 0)));
  Modelica.Mechanics.Rotational.Interfaces.Flange_a flange_a annotation(
      Placement(visible = true, transformation(origin = {165, 19}, extent = {{-19, -19}, {19, 19}}, rotation = 0), iconTransformation(origin = {11, 1}, extent = {{-19, -19}, {19, 19}}, rotation = 0)));
  Modelica.Electrical.Analog.Basic.Ground ground1 annotation(
      Placement(visible = true, transformation(origin = {17, -43}, extent = {{-17, -17}, {17, 17}}, rotation = 0)));
  Modelica.Electrical.Analog.Sources.SignalVoltage signalVoltage1 annotation(
      Placement(visible = true, transformation(origin = {-162, 12}, extent = {{-24, -24}, {24, 24}}, rotation = -90)));
  Modelica.Blocks.Sources.Constant const annotation(
      Placement(visible = true, transformation(origin = {-174, -56}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
    equation
    connect(signalVoltage1.v, const.y) annotation(
      Line(points = {{-146, 12}, {-112, 12}, {-112, -56}, {-162, -56}, {-162, -56}}, color = {0, 0, 127}));
    connect(signalVoltage1.n, emf.n) annotation(
      Line(points = {{-162, -12}, {-162, -12}, {-162, -12}, {16, -12}, {16, -12}}, color = {0, 0, 255}));
    connect(signalVoltage1.p, resistor1.p) annotation(
      Line(points = {{-162, 36}, {-162, 36}, {-162, 88}, {-140, 88}, {-140, 90}}, color = {0, 0, 255}));
    connect(resistor1.n, inductor1.p) annotation(
      Line(points = {{-106, 90}, {-58, 90}, {-58, 88}, {-60, 88}}, color = {0, 0, 255}));
    connect(inductor1.n, emf.p) annotation(
      Line(points = {{-28, 88}, {16, 88}, {16, 56}, {16, 56}, {16, 56}}, color = {0, 0, 255}));
    connect(ground1.p, emf.n) annotation(
      Line(points = {{18, -26}, {16, -26}, {16, -12}, {16, -12}}, color = {0, 0, 255}));
    connect(inertia1.flange_b, flange_a) annotation(
      Line(points = {{130, 22}, {160, 22}, {160, 20}, {166, 20}}));
    connect(emf.flange, inertia1.flange_a) annotation(
      Line(points = {{50, 22}, {98, 22}, {98, 22}, {96, 22}}));
    annotation(
      Icon(coordinateSystem(extent = {{-200, -200}, {200, 200}}, initialScale = 0.1), graphics = {Bitmap(origin = {-1, 0}, extent = {{-199, 200}, {199, -200}}, imageSource = "")}),
      Diagram(coordinateSystem(extent = {{-200, -200}, {200, 200}})));
  end Tires;

  model People_Conditions
    annotation(
      Icon(coordinateSystem(extent = {{-200, -200}, {200, 200}})),
      Diagram(coordinateSystem(extent = {{-200, -200}, {200, 200}})));
  end People_Conditions;

  model Record_Data_Out
    parameter Modelica.Blocks.Interfaces.RealOutput Cdrag annotation(
      Placement(visible = true, transformation(origin = {-114, 128}, extent = {{-20, -20}, {20, 20}}, rotation = 0), iconTransformation(origin = {-114, 128}, extent = {{-20, -20}, {20, 20}}, rotation = 0)));
    parameter Modelica.Blocks.Interfaces.RealOutput Density annotation(
      Placement(visible = true, transformation(origin = {-113, 87}, extent = {{-21, -21}, {21, 21}}, rotation = 0), iconTransformation(origin = {-113, 87}, extent = {{-21, -21}, {21, 21}}, rotation = 0)));
  equation

  equation

    annotation(
      Icon(coordinateSystem(extent = {{-200, -200}, {200, 200}})),
      Diagram(coordinateSystem(extent = {{-200, -200}, {200, 200}})));
  end Record_Data_Out;

  model Integration_Record_Data
  Modelica.Electrical.Analog.Sources.SignalVoltage signalVoltage1 annotation(
      Placement(visible = true, transformation(origin = {-82, -24}, extent = {{-38, -38}, {38, 38}}, rotation = -90)));
  Modelica.Electrical.Analog.Basic.Resistor resistor1 annotation(
      Placement(visible = true, transformation(origin = {-25, 47}, extent = {{-17, -17}, {17, 17}}, rotation = 0)));
  Modelica.Electrical.Analog.Basic.Resistor resistor2 annotation(
      Placement(visible = true, transformation(origin = {30, 84}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  Modelica.Electrical.Analog.Basic.Resistor resistor3 annotation(
      Placement(visible = true, transformation(origin = {82, 84}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  Modelica.Electrical.Analog.Basic.Capacitor capacitor1 annotation(
      Placement(visible = true, transformation(origin = {28, 18}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  Modelica.Electrical.Analog.Basic.Capacitor capacitor2 annotation(
      Placement(visible = true, transformation(origin = {80, 18}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  Modelica.Blocks.Sources.Constant const annotation(
      Placement(visible = true, transformation(origin = {-156, -28}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  Modelica.Electrical.Analog.Basic.Ground ground1 annotation(
      Placement(visible = true, transformation(origin = {-82, -98}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  extends Modelica.Electrical.Analog.Interfaces.TwoPin; 
          Real P;
          Real ip;
          equation
          P = v*ip;
         p.i=ip;
    connect(p, resistor3.n) annotation(
      Line(points = {{-100, 0}, {-98, 0}, {-98, 100}, {124, 100}, {124, 84}, {92, 84}, {92, 84}}, color = {0, 0, 255}));
    connect(n, ground1.p) annotation(
      Line(points = {{100, 0}, {100, 0}, {100, -88}, {-82, -88}, {-82, -88}}, color = {0, 0, 255}));
    connect(signalVoltage1.n, ground1.p) annotation(
      Line(points = {{-82, -62}, {-82, -62}, {-82, -88}, {-82, -88}}, color = {0, 0, 255}));
    connect(resistor2.n, capacitor2.p) annotation(
      Line(points = {{40, 84}, {52, 84}, {52, 18}, {70, 18}, {70, 18}}, color = {0, 0, 255}));
    connect(capacitor1.n, capacitor2.p) annotation(
      Line(points = {{38, 18}, {70, 18}, {70, 18}, {70, 18}}, color = {0, 0, 255}));
    connect(resistor3.p, resistor2.n) annotation(
      Line(points = {{72, 84}, {40, 84}, {40, 84}, {40, 84}}, color = {0, 0, 255}));
    connect(signalVoltage1.v, const.y) annotation(
      Line(points = {{-56, -24}, {-30, -24}, {-30, -74}, {-132, -74}, {-132, -28}, {-144, -28}, {-144, -28}}, color = {0, 0, 127}));
    connect(resistor1.n, capacitor1.p) annotation(
      Line(points = {{-8, 48}, {6, 48}, {6, 18}, {18, 18}, {18, 18}}, color = {0, 0, 255}));
    connect(resistor1.n, resistor2.p) annotation(
      Line(points = {{-8, 48}, {6, 48}, {6, 84}, {20, 84}, {20, 84}}, color = {0, 0, 255}));
    connect(signalVoltage1.p, resistor1.p) annotation(
      Line(points = {{-82, 14}, {-82, 14}, {-82, 46}, {-42, 46}, {-42, 48}}, color = {0, 0, 255}));
    annotation(
      Icon(coordinateSystem(extent = {{-200, -200}, {200, 200}}, initialScale = 0.1), graphics = {Bitmap(origin = {-29, -4}, extent = {{-151, 196}, {151, -196}}, imageSource = "")}),
      Diagram(coordinateSystem(extent = {{-200, -200}, {200, 200}})));
  end Integration_Record_Data;


















  model Modelo_Panel
    Modelica.Electrical.Analog.Semiconductors.Diode ID(useHeatPort = false) annotation(
      Placement(visible = true, transformation(origin = {-28, 108}, extent = {{-10, -10}, {10, 10}}, rotation = -90)));
    Modelica.Electrical.Analog.Basic.Resistor R(R = r) annotation(
      Placement(visible = true, transformation(origin = {16, 146}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
    Modelica.Electrical.Analog.Sources.SignalCurrent signalCurrent1 annotation(
      Placement(visible = true, transformation(origin = {-118, 116}, extent = {{-24, -24}, {24, 24}}, rotation = 90)));
    Modelica.Blocks.Sources.Constant const(k = 10) annotation(
      Placement(visible = true, transformation(origin = {-176, 100}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
    Modelica.Electrical.Analog.Basic.Ground ground1 annotation(
      Placement(visible = true, transformation(origin = {-94, 20}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
    Modelica.SIunits.Current Ip =1;
    Modelica.SIunits.Voltage v;
    Modelica.SIunits.Current i;
    extends Modelica.Electrical.Analog.Interfaces.OnePort;
    parameter Real r = 20;
    //Real ex=2.173;
    Real I0=1;
    Real m=2;
    Real K= 3;
   Real Tc = 3;
     equation
    connect(p, R.n) annotation(
      Line(points = {{-100, 0}, {66, 0}, {66, 146}, {26, 146}, {26, 146}, {26, 146}}, color = {0, 0, 255}));
  connect(n, ground1.p) annotation(
      Line(points = {{100, 0}, {-38, 0}, {-38, 30}, {-94, 30}, {-94, 30}}, color = {0, 0, 255}));
Ip=I0*(exp((v+(Ip*r))/(m*K*Tc)-1));
    connect(ground1.p, signalCurrent1.p) annotation(
      Line(points = {{-94, 30}, {-118, 30}, {-118, 92}, {-118, 92}}, color = {0, 0, 255}));
    connect(signalCurrent1.i, const.y) annotation(
      Line(points = {{-134, 116}, {-152, 116}, {-152, 100}, {-164, 100}, {-164, 100}}, color = {0, 0, 127}));
    connect(signalCurrent1.p, ID.n) annotation(
      Line(points = {{-118, 92}, {-118, 92}, {-118, 46}, {-28, 46}, {-28, 98}, {-28, 98}}, color = {0, 0, 255}));
    connect(signalCurrent1.n, ID.p) annotation(
      Line(points = {{-118, 140}, {-118, 140}, {-118, 146}, {-28, 146}, {-28, 118}, {-28, 118}}, color = {0, 0, 255}));
    connect(signalCurrent1.n, R.p) annotation(
      Line(points = {{-118, 140}, {-118, 140}, {-118, 146}, {6, 146}, {6, 146}}, color = {0, 0, 255}));
     annotation(
      Icon(coordinateSystem(extent = {{-200, -200}, {200, 200}}, initialScale = 0.1), graphics = {Bitmap(origin = {-27, 51}, extent = {{-85, 91}, {201, -189}}, imageSource = "")}),
      Diagram(coordinateSystem(extent = {{-200, -200}, {200, 200}})));
  end Modelo_Panel;


  model Bateriatest
    Modelo_Secuencial_Bycicle.Integration_Record_Data integration_Record_Data1 annotation(
      Placement(visible = true, transformation(origin = {-81, 51}, extent = {{-107, -107}, {107, 107}}, rotation = 0)));
  Modelica.Electrical.Analog.Basic.Resistor resistor1(R = 20)  annotation(
      Placement(visible = true, transformation(origin = {96, 16}, extent = {{-54, -54}, {54, 54}}, rotation = -90)));
    equation
    connect(integration_Record_Data1.n, resistor1.p) annotation(
      Line(points = {{-28, 52}, {54, 52}, {54, 128}, {96, 128}, {96, 70}}, color = {0, 0, 255}));
    connect(integration_Record_Data1.p, resistor1.n) annotation(
      Line(points = {{-134, 52}, {-132, 52}, {-132, -142}, {96, -142}, {96, -38}}, color = {0, 0, 255}));
    annotation(
      Icon(coordinateSystem(extent = {{-200, -200}, {200, 200}})),
      Diagram(coordinateSystem(extent = {{-200, -200}, {200, 200}})));
  end Bateriatest;

  model Integration_Record_Data_1
    Modelica.Electrical.Analog.Sources.SignalVoltage signalVoltage1 annotation(
      Placement(visible = true, transformation(origin = {-82, -24}, extent = {{-38, -38}, {38, 38}}, rotation = -90)));
    Modelica.Electrical.Analog.Basic.Resistor resistor1 annotation(
      Placement(visible = true, transformation(origin = {-25, 47}, extent = {{-17, -17}, {17, 17}}, rotation = 0)));
    Modelica.Electrical.Analog.Basic.Resistor resistor2 annotation(
      Placement(visible = true, transformation(origin = {30, 84}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
    Modelica.Electrical.Analog.Basic.Resistor resistor3 annotation(
      Placement(visible = true, transformation(origin = {82, 84}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
    Modelica.Electrical.Analog.Basic.Capacitor capacitor1 annotation(
      Placement(visible = true, transformation(origin = {28, 18}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
    Modelica.Electrical.Analog.Basic.Capacitor capacitor2 annotation(
      Placement(visible = true, transformation(origin = {80, 18}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
    Modelica.Blocks.Sources.Constant const annotation(
      Placement(visible = true, transformation(origin = {-156, -28}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
    Modelica.Electrical.Analog.Basic.Ground ground1 annotation(
      Placement(visible = true, transformation(origin = {-82, -98}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
    extends Modelica.Electrical.Analog.Interfaces.TwoPin;
    Real P;
    Real ip;
  equation
    P = v * ip;
    p.i = ip;
    connect(p, resistor3.n) annotation(
      Line(points = {{-100, 0}, {-98, 0}, {-98, 100}, {124, 100}, {124, 84}, {92, 84}, {92, 84}}, color = {0, 0, 255}));
    connect(n, ground1.p) annotation(
      Line(points = {{100, 0}, {100, 0}, {100, -88}, {-82, -88}, {-82, -88}}, color = {0, 0, 255}));
    connect(signalVoltage1.n, ground1.p) annotation(
      Line(points = {{-82, -62}, {-82, -62}, {-82, -88}, {-82, -88}}, color = {0, 0, 255}));
    connect(resistor2.n, capacitor2.p) annotation(
      Line(points = {{40, 84}, {52, 84}, {52, 18}, {70, 18}, {70, 18}}, color = {0, 0, 255}));
    connect(capacitor1.n, capacitor2.p) annotation(
      Line(points = {{38, 18}, {70, 18}, {70, 18}, {70, 18}}, color = {0, 0, 255}));
    connect(resistor3.p, resistor2.n) annotation(
      Line(points = {{72, 84}, {40, 84}, {40, 84}, {40, 84}}, color = {0, 0, 255}));
    connect(signalVoltage1.v, const.y) annotation(
      Line(points = {{-56, -24}, {-30, -24}, {-30, -74}, {-132, -74}, {-132, -28}, {-144, -28}, {-144, -28}}, color = {0, 0, 127}));
    connect(resistor1.n, capacitor1.p) annotation(
      Line(points = {{-8, 48}, {6, 48}, {6, 18}, {18, 18}, {18, 18}}, color = {0, 0, 255}));
    connect(resistor1.n, resistor2.p) annotation(
      Line(points = {{-8, 48}, {6, 48}, {6, 84}, {20, 84}, {20, 84}}, color = {0, 0, 255}));
    connect(signalVoltage1.p, resistor1.p) annotation(
      Line(points = {{-82, 14}, {-82, 14}, {-82, 46}, {-42, 46}, {-42, 48}}, color = {0, 0, 255}));
    annotation(
      Icon(coordinateSystem(extent = {{-200, -200}, {200, 200}}, initialScale = 0.1), graphics = {Bitmap(origin = {-29, -4}, extent = {{-151, 196}, {151, -196}}, imageSource = "/9j/4AAQSkZJRgABAQAAAQABAAD/2wCEAAkGBxITEhUTEhIWFhUXGBoYFhgYFxkeHxciHhodHhogGBoeHSggHR0lGx0eIjEhJSkrLi8uGiAzODMtNygtMSsBCgoKDg0OGxAQGi0mHyUtLS0tLS03LTctLSstLS0tLS0tLS0vKy0tKy0uLSsvLS0tLTAtLS0tLS0tLS0tKy0tLf/AABEIAOMA3gMBIgACEQEDEQH/xAAcAAACAgMBAQAAAAAAAAAAAAAABgUHAwQIAgH/xABTEAABAwIEAwUEBQYICwcFAAABAgMRAAQFEiExBgdBEyJRYXEygZGhFCNCUrFicpPB0dIIFRckM2OCkjVDVnOjssLT4fDxFlWDorPD4iU0NkRT/8QAGgEBAAMBAQEAAAAAAAAAAAAAAAECAwQFBv/EADERAAICAQMDAgQEBgMAAAAAAAABAhEDEiExBEFRBWETIkJxgZHw8RQyUrHB4VNiof/aAAwDAQACEQMRAD8AvGiiigCvObWvqjWGawy5dLSRKRnor4k19rZO1aIPhNeSuvjtKWPcxMNtHSy/cQ4kwpKULUU6AiYHUEVzzyT1OMSyQ3pVNeq1cNukutIdROVxKVpkEGFCRIOoMHY1tVrjbcU2Qz4o1jzmtDiDFU21u9cL9lptSyJAmBoBPUmAPM1Q+B88rxtZ+ktIfbJJEQhSQTsCBBgaCRJ6msW5zbceCTojtK9pNaGFXReZbdLam86QrIqMyZEwYJE1ICrYXJt2yGFFFFdBAUUUUAUUUUAUUUUAUUUUAUUUUAUUUUAUUV8JqG6Vg8OGo7EMXt2FNpeeQ2p1QQ2FGCskwAB61sXza1NrDawhwghCynNlPQlPX0rkbi1V8i8c+nKc+kpUJUo66eyUxpEAERpXHGPxZNtluDsFCqy0pcuuJRf2LT8/WDuPDwWnQ/EQr+1TWg1phlT0MM8uVzFzbwwnHXETPbKZjLuMyUpgeeldOu1RHGVj23FNujvRLC+6OiBmn0lOponWSQ7F62jeVCU+AA18hFe3DQg71icWACSQABJJ6Drr4VVzrGku4rcp7+ERj+RlmyQrVxXaOQfsp0SD5FRn+zS9yP4E+kOfTrhH1LSvqkn/ABix1gjVKfx9DUdaWDnEOMOuAKSxmBUTm7jaYSlI6BagJjxKj0ro2ws0MtoaaTlQhIShI6ACBSUtEdK5BtNjrWSvgFfa6McdMaIYUUUVcgKKKKAKK+FVfahSTdIBRRXwmjdbsH2ivOYV9moU4vhg+0UUVYBRRRQBRRRQGFSYpJ5ocCpxNgZClFw3q0ogd7xQo7hJ+R1p7IrCRXHki8crRZbnOnJnHF2GIrsriUJePZqST7DiSQny1kp85FdGJNVlzc5ffS0fS7NITdt95WXQugbR+WIEHyjwpo5fcQ/TrJt1Wjqfq3wRBDidFSOk7x51E3dTQQzuVXl7aZ+JGFEKIbs1KkbAlRSM3lCj76sAmolvCx9OXcwqTboaB6H6xSj7xCfjVXO22SS80l81L51NmLa3SVXF2rsGwncAglaj4JCRqfOnOopnCQbpV24JWEdkyk6htMkqUnwUskSfBCB0qsXTtg0+BeFG8NtUsIhS/adciO0UevoBoB4CmRsV4rMkVpiTlO2Qz7RRRXaVCiiigPBXXgqoIr5XBPJJ7MvQVmTtWGsre1X6d/MQz1Xhw17rE4da2zuokI80UUVxFj23WSvLY0r1XfiVQRVhRRRWhAUUUUAV5Wma9UVEoqSpgwUuMYILW8XcMAhu5MXLYGgXqUvJHSScq9NcwVpBlmcT1rxXBKLg6LhURiXFFiwvs37thte5StxII8JBNVNzZ5oOFxVjh6lJykpedTuo7FDZGoA2Kt5GniVzh/k3id1Dj2W3SoyouklfrkGpJ37xFaQwWrZDZd6OPcLJI+nW4jxcTB8IMwam7C/aeTnZdQ4nTVCgoa6jY1RWLchLtCZt7lp49UqSWz/ZMqB95G3WkfCsVv8ABrtQTLbqYS62rVKxvChsR4Ea671eXT7bMizrhArLUPwnjzd7bIuGwQFAEhUSDExoSKmK1xQ0R35DYUUUVoQFFFFAJ/M7iZ/D7Q3DDCXTmCSVEw3OylAaqE6QCNxStyX47fvzcNXbmZ1JDjeiQMp0KQAPsmPHerPxWwbfZcZdEocSpCh4hQg+lc24TbOYHjraHCezz5M0f0jbmgJ21BIJ8Cnr155wi7Xfkk6VrI0ax17arDC6miWZK0MScKWnFJMEIWQfAhJit1e1QnFzykWN0tJhSWXCD4d01rndySCKN5fcb4ve4hb26rtakFcuDI2O4nVWoRIkCPfXRFUT/BywaXbi7P2UhlPqohSjtvCQND1OmtXukVTLWukEZRX2iiuxKioUUUVICiiigCiiigClnmHjCrLDrm5QJUhICfIrUlAPuKp91M1JnOO2U5g14lAkhKF+5DqFq/8AKk1WUFLkFaci8GZCXsRuCMyVlttThEJMArVJPtd4CT4mnHHubeHsSEPF9Q0+r1H97Y79POqN4Q4Yu8RKmbdQyI7ygtyEpzaTl3J0Gw6CrBsuTjLR/nNyXVfcbTlA29pRJJ6iAB4z0reN1siCLx3nLcukhlGROsSdffGp+NIWLuXT5Ny+hZBgFeQhPkJiOvrV3W/B9hbplLQEfaPePTqZ8KR+ZuIJSylhJ1WoKI00SJifDWPgamUXVtgd+SOOFFgESFBK1Zk6SmTI/wCTVsWV+hz2Tr1B3FcuYBwpeG2ReWTpDmpKEqIJhRiOh29k00cO8zlJWGb9stLBguJBEfno3HqPHbrUUmt9gdC0UrYLxQlaEqCkutnZaSD/ANfxpkt7hCxKFAj/AJ3qkotEmWiiiqgKrfnNwd9OtO1bTNxbgqQJAzpMZ0n3CR5jzqyKxOCsc21SXYlCvy3x0XmHW7uYKWlIbd20WgAKkDYnRURsoU0N70mcM4R9AvrllIAt7o/SGQNAhY0dQBPhlUNBpp9mnJG9c2ymmix7cNQPGv8Ag+7/AMw5/qmpxw1A8bWi3rF5lCsinQlsKHTOtKT1HQnSRUzd5CFwQ3J3CPo+FMSmFOy8rxOb2Z/s5d6eGxWC3ZShCUIEJSkJSPAAQB8BWw3TH82Sw+D3RXkrqH4k4mtrJou3LoQn7I+0swTCU7k6V0vLFbLciiZJoBpf4P4gTf2qLpKChK1OBIJkwlakAnQakCY6TEmp5qqRyylOhR7oooroICiioriTiK2sWS9cuBCdco6rIE5UDqdKA37y7baQpx1aUIQJUpRgJHiTXPvMPmFc4o8qxw1Kyx3kqyDvPgHUnwbgTGmh13gfMRxDE+I3ihkFmxSRoqcgIic6gO+53pyjy9asLCcAtsOYUzap7xSe0dVBUoxrr0Gmw0HrV4wcgc/cJ4re27xVYlfaFJzJSM2ZI1Mp6gRNMSua1+CZQxM6yhf79L/AuJC2xC1eMBKXkZiQTCScqjA6hJJrpHjCwTKzkT3k5hoNxv8Ah86mFt0mQUJd8yr1z2gztpCFaf8Am3pRublbiitxRUo7kmTVtca92xfKQAYSJgbFaQfkSPfVQgUyWnTYRfvLZrLZNCZ7iVf3pV+uKkuIuHLa8RluECR7KxAUn0V4eR0rW5aWylsNIGn1TZM/Z7upNIPOHi9D74tbUwywYUsEfWrB9oEE90dPEyfCtHNJUD1ecMYlhalO2ThcZ1KkjUx/WN7HQe0n5TTJwjzRZdUlDxLDxgZvsKPr9nXorTzpP4R5lvW+Vq5BdaGgV9tAiAAdlD1131pzxThrD8VbLzCwFxAcb6HcBxHv8j51Ef8Ar+QLUw/iAGA512UNj5n/AIVNoWCJBBHiK5gH8a4MZP1tvMblTZ396DHu9asLg3mQw/ASvsXSY7NwiFfmnY+EaGquKfswW/XlwaVG2ONoXAV3VfI+/wDbUnWOSDppko0rq2SvKSBmQoKSY9k7GPVJKT5E1nFR3EOMtWdu5cPqhCBPSVHolIJ1UToBVGYti2N44sfR2XGLae7BUhGvVbhjOdPs7eHjxY8UpvYs2dAKuUffT/eFewZrjqxwF128FkFIS6XS0ConLmBI3AJgkRt1pownijFMFfDS1FTKVFJbUZbWAYPZqIlPujpI6Vo+nfKYs6eoKqhOE+KbbEGe2tlSAYWhWikHwUPwOxqUvLRDqcjiQtJ3Sdj6jqPI6Vz1WzJKz4+5vs2xUxYgPv7Fe7aDO2hlat9tJ8dqpvEbTFMQeU84zcPL6ns1kJEkhKREJTvAHnXVtrhjDYhtltAJmEoSNfcK2prWOVR4RFCbygsnGcJt23m1NrSXZStJSRLqyJB8tad29qxVlRtU4XeSw+D1RRSPzN5htYY1lTlculj6tszCR95yNQnwGhMadSOwqSHHXHFthjWZ05nVA9k0PaXHj91M/aNU7w1gd7xDc/S79ahatkgQIB1ns2R+K99N521eDOE7rHbpd7erUGM3fXtmjZtodEjaenrRzJ5gvB1dhYH6NaMHsgGxkUopMK1GoTMiBuN5mpBdC3GWEBi2QhtKRAQiAE+Og+0d5qOcTII8QRXMlpibzTiXW3VpWkyFBRmf1+YO9XRwpxO7cW6HFEFXsqkCCRvEdDvW+OaexDINjkm8qIv7YGJjvyPlV04tbH6O1nKSpKUpWUmQZTBgnUiR1pQbxj7yPgf1VixLi61t0y87knZOpKvRI3/CixqLuxZA8RYKu6aUwhRTKhJgnRKvD1A61l4e4DbZjKgZ/vrgq93RPyr7hnMuwdcCCVtTspYATPmQdPU05gzrV1pe5BpYjimGYcVW11drzXCAleRKhkB3OdOqdFeMxVecR8nlFBucKfTdMnvBEjMB+SoGF/I+tWRiFg0+js320OI+6tIMHxSd0nfUQdaTxwU/Zr7bCrxxpcyWVqlCh4HoRv7QPTWRNYzxy5LJ0Utd2rjSihxCkKBgpUCCPca2MJxZ+2X2jDikK2MdR4EbEetWze8Xsvj6PxBh/ZrkpTdNo6jwiZgHdJI121qBx7laotG5wx9N3b7jKRmHkRvM6Rv4xWGpx5N1iU/5Hv4fP4dn/f2J7hbmUxcDsrsJaWdMx/o1+s+yfI6edHFPLNh+XLQhpw65f8Wr0j2fdp5VXNtwi8oSpSU+Uz8YqVwjia/ww5FjtWeiVKJSPzFbp9NvLrV4dTjm9LdmmXoOpxQ1zg0v1z4/E37PinEsLWlm8bU40NAFHWPyHNZ22M+6rV4P47ZuE/UOTEZml6KT6D9YkVFYTjljibRQMq9O+y4BmT5wd+neTt5Gk/iHlgpB7XD3FBQMhtSoI/MXp8/jW9Ott0cZK8ZYqcaxdjDEFTdu2s9p4qUkEuEeiQUjzk9avJi1QhISlICUgADwA2j0Fcb9veMXRVnebugogqClBzMrQ6g5iTPvnzpgOG4++kuqF8oeyStbo6bQogkQaw44JNnHrks8Rrc0GW9SrvbQVgg+kGZpx48csXVvMruGYUcyTmT3SdQR8fxqn8Yw1+3cyXCClZSFQogmDtMExtsdanhy8vYSopQAoAplREyAfu+dXi2rVEEzyKxjsMTS2VQl9CmyNYKtFI98gifyj410vXK3KJEYzaCQYWvUbGG16ia6wrlyYdTuyyZhivuQ1loqq6ePkWYuzNZEivtFaQxxjuhZW3NHme1YIUxbKS5dnSNwzpuv8rXRPx86r5dcC3GMXCrm6WvsAqXXFE5nSPsoJ+BPQaCl7mNghs8RuGSFZc5WgqJOZK+8k5iSVbxJJMgzrXnD+O8SZQhtq8dQhAAQkEQANhERWhB1ra4e202hppIQ2gAJSkQABtXPHHfKO9buHXLRkusKWVICSMyc0Egp8ASQPIVpYbzoxdtUuOoeGndW0gesFsJOvnNMNtz+uAfrLNsiNkrUDPqQfOlgR7blriq1hP0NxM/aXASPUzpV5cF8GC1skMO5S4CorKCSkkn8oA7R4VA2HP21OXtrR5GneKFJVB8gSJFTtlzfwd3KFOLaJ0hbahl9VJkfOrwkog27nhgbp+Rg/A6VzLj10ty4dWuc2ciFCCmDABHQgCK6zssfw98gMXtuskZsodQTHiUzI36iljiHlNYXTq3yFpWtWZam16HT7pECd9KtKWrgg5kq8OFbx4WrJUpWbInc+WnyqdsOTmGtLzKDrkbJWrSfMACfQ6UyL4dQEhCEoypACUxGUDYCNtKtjjXIYsoxZY3gjrOnzpexHmnatqypbW6RuUEZfcTvUjzLwNaLB9TaVAgAqgmMuYZtfCOnhVCVOSbWyCOhsBx+1xNlSQnNEdo04AcszB8D11HnUNdcviy4bjDLlds70TJy+YkagE6wcw/UjcsLV36Qp1OYISggqGxJIgT8/cKthjFVD2oUPgfjUxqa3ArXXEi0ns8Zsy2qRF5bp+BcTOVeszEHymg2KXWi6y43cM/aUjUpB27Rs95B9Rp4174h5n2qJbaaL+4XMBHpMHN+FQPDdtaXzpXZKcsLtOZYCFEoIndJ0IGuqdBGwiuLN0mOb2e563ResdR0y0v5o+H/AIfb+3sR15w1lUHbRZbcSQpInQfmnce+mrgjjm4ceFndNKW5MBaAJHiXRMQNO8PgaiOJmsV7rC7VJdWrL9IYGjoI2UB3EGdSqEnQ+Zp64H4WTYsZTCnl6urHySCfsj571fpseWLqT2M/UM/SZWpYIOL7+PwX7fYqLmX/AITufVP/AKaasfh7mghVs1b36lIfa7pJQRn+6pR6HLA1jx60h82mUpxFZSIzIQpW+pyxPwAq2ebPBdu8WVQUqCA2FjeE7A/e08fCtVevY80qXmjdpeu0uoKSlTScpCgdifD1phvuMQixaCni48WUhKZmCEgSRsmP1Un8XcOItOzyulZXOhEER1n31HcP4eLi4QySQF5hI6QkkfMUtqTBZ/8AB2wBxV25eKTDTbRQgmRK1EbDqAkKB8yPd0HXOuC8R3+EQHmy9bzCXUR3QIEHSPcrx0NXDwxxvbXbYUhwHxI6fnJ3SflUOHgkaaKBRVAFFFFAJXHHLS0xN1Dzy3ULSnJLZQMwmRmzJO0mqB5gcEKwu6ShzOu2WZQ4AAVJnvJ8M4Hu2PlXWdLnH3C7eIWbjCkjPBUyojVCwO6QfA7HyJoCr2OUmFOtJcavnYWkKQS4ydxIlOUH3SK018lbeDlxRMxpLaInpP1u1JfBfAa79b7XbpZeZOrakkk6lKtQY0Vp76n3OTjyTCrpAP8Am1ftrRK+EQbLnI+4KQWbxlzWD3VAD3idfKo665MYmlUJ7FY8Q5Hugia2TysuUIVkvdgSlCUqGYxoPagTtNLvCt9iVxcN2zWIuMrGjYdfeCO4JywAoDQaAiNI8ATjXKJMN3y8xRswqydM7ZQFfNJMe+sjTeN2ik5RetHcAdrBjTbY++rQawridpBKby2eOhgqk+4qbSke81srx7iRkFTuHsOgifq1juxvIDh3n5Go0oFc2nNrGGTkW8HMspKXmkkgzrm0CpG2ppmw3nsrQXFkkiRKmnCkgde4oEE+8VvWnO+2UIfs3EkmFZSlQjrIVE9dKlLXijhu5ASpu1T9rK7bhuOntBOUnXYE/KiXhg2MO5tYU+nK6tTRV3Sh1skQTHeUmU5Y3nxqZZwHCLuVtsWjxO6kBBOw3y67RpUHccr8FukyxmR0CmHQoab6KzCljEOSNw2c9jepKhqAvM2oddFJnWY8PWrXJcogtNvAW0JCGYQkCAkJAA9Ipb40wFxVnchDcr7JRSU7mBMCNdQCI86R0YhxPh8pcbceSkZpWO2Eak/WJJV7s3QVK4PztSFZL60U2RIUpozBjq2qCNZ+1VviLgUUdTXy2sn1XrbjSVENklSgDA7p0J212q+MNxrB8RgpNs6siMrraA4PKFpnQnoSN6mhgLSE5W0hpPRKUgJ9wAFVjBXdgWm8TjRxJQffFbrbgUJSQR5VvPYYsdAof89DVV818eXaFDFv9U4tJUtaZSoCdAmNBOuvlWzkkrIJHiDgoXWIN3Knm8qS1mZUJKwggqB16ielWHxM+i4QMs5hOh9xFcoi5Xn7TOrPM5sxzT45t5866K4PvFvWVu44ZWpsSTOsaSZ6mJrODUnZJW3FfB2I3L6nA0AgQlAziYHUgdSda1uG+Dbu3um3XUAJQTm73ikj8TVzvvJQlS1qCUpBKiToANyaqfi7mctalNWOiCI7Ug5lE/cB9keon0qZRinbA7YzxHaWduE3CgoqTo1EqXMnUbAeZ8arPg/EEOYuythkW6FFQLaVEj2Fb/s2rM3wYtq1evsQKgrIrI2o95S1aIK1epnLvpr4Vq8pGArE2SfshSh6xGvxqrk21YOr29h6V6oorEkKKKKAKKKKAormC2MLx22vkHK3cT2u0bhLk+UKSr1q08XRKJ8CPnSvz8wbtsMLoEqt1pWIHQnKrrtBnrtWxy+xc3mFtLPthBbXr9pGknQbgA/2utbY3uQzNVPcyrA2V+1eM93tDn0++kjN/eBHTqauGkvm3h3a2CljdlaV+4nKr4TPuNaZFaA34feJcbQ62rurSFJIPiK328QcH2p9RVfcoL9TliUKJJacKBPRJAUBPXUq+Qp4qydqwUvxhhDdnizbq20qt3nQ4UKEpgqHapjwBJIHgQNYq0r/AICwZ/e27IwBLalIjWdgSifMg0uc2/o5s8rrgS6DmYHVRBAUAB0IO+0xS0rB8XvGG13Fx2TLghDZ0UpIgBRbSNUnoVHWD41moXLSldmeXLDFBzm6SNPjHAMNs3ItcQWpYCpCYVlPROZERHWdaiML5g4mxAbu3CB0XCxtH2gdI6VmwXhJN1fJtbdaltpgvO6QAPbKQNvACdTUvc4ZZXGIGyw6yS4kSlTi3Xhqn21A5yAkdDBnwMivO6nrseLK8VbxVuqpL3baX2othi5R126fF/tf5klg/PG8QAH2W3dpUmUE+MgSkn0AFMo5s4Rdwi8tDBgEuNIWBJE6g5gBvMdKUOJuXDKVK+iPKOUahcEKPghQ1A9ZqtXGyklKgQRoQRBHqK7Ep6IzlFpSVq+f9GeLqcWaUo45W47MvdfDPDOIH+bvJYcVMJbdyySQB9U55jQJA366VtI4BxW01w3FcySSezfmI6bhSSYgbCaU+AuX9hiFilxTq23wpSVFK0nbbukaSCNP21JK5aYvaQbDEc4EQkqU3trGUlSN+kxTT3o3GP8A7c4laaYnhThSN3rUFSfUiSkbgakdaxYu/gONhsuXnZuICggKUGld6NDnBCtRIAPU0m4DzTxhDhYLQuVoJCkhBz90wfY8+sVs3XGuEXZyYphamHditvcabmAhY1ERCumtLfkDRZckLFCsy1vPJjQFQA9SUAH5imdeEotmdFJSy0jdSiMqUjqpR8OpNIuEYW0mDgmP5TJi3fUCk97RICoI8PZMzvS9zd4puShrD3XEKcQAu6U1ISpZnKgeQSZPiSNBAq0Z0uCBe4240evlllqUsZhlQBq4Z0Kup12Tt76m8DwyzwttF1entLkyW2kwcmnwKh1VsJ671DWhZsG0nKHb1YBSmJDWYaDTrB6amfCtXAmXbjEUi5GZQzKWlfQAEgR4SRpTvvyD1xhiF5dITdXHcbUrKy2JAiCc0f7R3nTSm7lPwi4hbF8pYCVpUA2UqCoKiAfCCBPoaguaL/eZbE7FUdOgGnjpVw8I2gQzatGYSltJnQ9JmrKPzMFjUUUVgSFFFFAFFFFAamLWKX2HWVCUuIUg+8RVH8hMRUh26sFggiXACNikhCwZ16p0PhV91QLzIsOKogJRcKkSD/jk9Ndy7pPjNWi6YLGeRCiPA1p4jah1pxoiQtCk7A7iNjpUniiIcPnBrVrrKlWclnSld0wqQU5VEToCCUn37a+VPfFePosrdTyxmM5UJmMyjsJ8NJPkKUcCtexx+5TMBbSlgSdc2RXXrM1F85bhblxbW42yyBOhUtWUT6Rv5msk9MCSU4A4XVfrXi2KyWEmWkK9lyCRGX/+aTAA+0d51nb5icRrZTlEm7uRlaQndlBMAgAyFHZI9TTzi9w3ZWzFvlWoW7CMjYTJeUlOVMkADcSTpqZ6VTtgziyr43xYaW8qSntSMrc7ZRnEFI2BJ99cuWXUKMo44OqtvffxFPx/U/FLycE5YMmZfEmqi9la/m8te3Zfd+DeuGF4ewjCrSFX93H0pQE9mlQ0QlQnQAmTrAzHSRDdhWBs4YybdnvPrA7d7r+anwT5ftpRsuAcbS6u4auGg65JW4l7U5jJ1y6Ur4nxBiSXHWV3pUWycxSsFJynXKqO9rXk+nxxfxC1yU6+aSum59m1XEfpj9r4OrrceTNgccUtN9/bwvv5LSqueZeFhC0PpEZ+6vb2hsfUj8K2OB1Xdw52jrzhZR0Kj3z4CI0G59wqV5kf/Z/+In8DX2maaz9O5VXdHyXSY5dF18Makm3s69/1Z75I3py3LB2BQ4n3ylU/BPwNWoh1Q2UR6E1RHKW87PEEJMfWIWjr4ZhHvT1q9a8zE7ifZMp/ELxVhxAHphK3EqJ11S4AFdNYJO3hFXReItrjuXNs04CftoSqOkiRIMHcVT/O6yAVbvaSQpB8wkgj/WPxqwuFMQL9nbumMym05o2kaH01G1RFK2gesR5L4a+MzXaW6pJORUjefZVMeUGqJ4xwBVleuWva9opBSM8RMpB2kxv411zh7kj1ANcx83/8N3H5zX+oisZKmSTvC3CiLeHXe++ftbhM/d8/yqiuEpcxG7cKRoVifDvwI66gGnnpSPy1ZOe5V+UlMdZlRrdqmkiCI41lzEQjQf0aB74OvvVXQGGphxoeCkj5iqP4ns82NttTErYE+5NXphyZeR+cD8Nf1VEfqA5UUUVzkhRRRQBRRRQBVG/wgLLsruyvkgyCEE6jVCs6e9MA6nbWryqsf4QlhnwwOAAlp5CiZ2CgUGB11UmgGLE1haW3EwQoSCDI1AIj51H1g4PvPpGE2rk5iGwFGI1QShXwI+VbFdkd0VK/umMvELap9tjN6QlSI8/Zn30r80B2eKtuK9khpU76JMHT3GmHiX/D9l/mk/i7Wzzb4e7e3FwgEuMzmA+0g7/3Tr6E1lJWn9ySxOMrcPNM3TPfRkBzJggpUAUmeo1+dJ6EEkAAknYDrS9yn5oN2zQsb4EsyQh0mcgVHdWmPY3MzptHg9Y8E2STeWyDctrTLGTvJlW0kHURsfPyrs6frHDC4pXJL5V59v12Pm/VfS9eZZk6i61e3v8AruQfMPiE2VuiwtTN0/oqN0hWhO26th4DWqpssOU+tNmyYQk5n3ASQpQ6+GUahPjJPpI36Lo5n3UrXe3RI9n+hSTHQQkkaDaBThw1gibVkIEFatXFfeP7Bt/1rz/TPSXG3m3nJ6pvy32X+PC9zo631OHT4qw8JaYr7cv7Lt5fsb9jZoaQlttOVKRAH7fE+dKPM2/SGkM7qUrP6AafMn5UwY9j7NqmXDKj7KB7R/YPOkzAcHdxe8U6sFDIIzkahIEQhJ01I69JJjx9nrc0Yw+FHl/+I8v0bosmXMs870re/LNLg1hxi9snVohLq5bkjvAkoJ8d/GugarTmEyli8wxaUgISciUJEQELRt0+2PhVlmvMxqrR9gV9zpaJs2iEzleEmNgUK3PQTHyrf5TPZsOQIjKtY9dZ/XXvmqwVYc5Ed1SFH0B/41D8k7mbd9vNJS4Dl8ApP6yD8KfWC6sJc7qD5R+qufufdp2WLFwJjtG21z94iUk7/kge6r3whX1foT+39dVP/CSs/rLN8J9pC0FU7wQpIifNXTrWeVb2ESFsqUJJ3KQT7xUBy1am4uxGgfJ+BXU3hroU02pJkFCSD490VqcsrbK9iExIeHzzmtXyiBc4h/8AyFv/ADrH4Jq7MI/pkev6jVQcYp/+vWZjfsNfHvmrgwYfXIjxP4Gqr6iRvooornJCiiigCiiigCkfnNiLLWFXCXSJdAQ2kwSpUgiAfCJnpFOGI3zbDS3XVBDaElSlEwAB61ynx/xc9i10VpSvskA9i0NSlIEqUQOpAKiekbwKAt/kw4V4OhBjurdSPerNr71Gpmq75H8VWltb3DVy8hlXahaSswFBSY7vmMmv5wpiv+PcNQsp+lJUJkFCVqEE6ahO9dEJKtyCH4oth/HGHrAOYhQUddkzHpqo/GnqlNXMTDBKu3JMdGlyfISkfjWr/Knh/wDXfox+/VlKK7gw8Y8uGrjM7bQ08ZJT9hZ1P9kk9dqVLaxx+wbLTJdDajJS2UOJnbbWNB+FOP8AKnh/9d+jH71H8qeH/wBd+jH79Uag97BWz2I4shRSo3AI3GQ/u15bxPFSQAbgk6D6s/u1Zf8AKph/i/8Aox+9R/Kph/8AX/ox+9Vtcv63+Zz/AMJg/wCOP5IWsD5Z3Dyw9fuZQTKkTK1eqtk6+unhVp2Fk2ygNtIShA2CRHx8T50q2/M7DlGCtxHWVNmPTukmfdWynmJhun84/wBG5+7UpxXc3SpUiD5lQ5fYaydBnKpH5S0D/Y+dWNVY4vj1u9jNmtL7XZNIMuZtJObSdpmPjVgtYvbKISm4ZUo7AOoJPoAaRatkitzeu8lhlkguOJTp5Soz5aVAcjf/ANv/AMH/ANyvHO28BNs0CDAWswdRJAEjw0PwNSHJJsfR7hUd4uJBPkEyB8SfjVOcgLbwVXtD0NJH8IO0zYcw6ASW7gJJGyUrQqSrw7yUifPzpywc9+PEGovmvadrhN0nXupS5oJ9hQOvlG/pU5FsEI/DDqVWjBTMdmka+KRlV7swPurY4FlF5iDakwSttwajYgx79ai+XLnaWjSNJSpSNPzidfODTE232eLqgwl61BAiApTa432JCdfIEeVWXCZAtc0EqRfWDoMd4AGdQQ4Cfkat7Av6ceh/Cqq50tfzZhyB3XsvnqhRHu7p+VWDwPjTD62i282pRRJSFgkaQZG+h02qr+okfqKKK5yQooooAooooCm/4RK77sGwgfzKfrikySuRk7QRokdNYJOvSkLhjjqws7dbCcNUsuoKHnDcQpYKcqgCG5SnU6Dx3rpjEbBp9pbLyAttYhSVDQikO15LYSiczbi5+84dPTLFSnQKZb4owlE5MGEGPbuFLOngVJMb9PKvf/a/DP8AudH6X/4Vftty3wlBSRYskp2zAqnSNQokH3ipmw4fs2Z7G1YazRm7NpCZjacoExJ+NTqYOfbbji3WPq8GCgNO7Bj4NVINY6pQCk8OuqSdiGiQfQhiugWmUp9lIHoAK91OuQOfv44c/wAm3/0Sv9xR/HDn+Tb/AOiV/uK6Bop8SQOfv44c/wAm3/0Sv9xXx/HrXLkuMEfQojvI+jjx0gkJPTwFdBUU+Iwc8IvcDKFF/D3mBtKrdXXTRSV6fKsLdnww6nR5bUHqHZPxKhFdFuNhQhQBHgRNR99w/ZvR21ow7lnL2jSFRO8ZgYmB8Ka/YFDNcG8PLGZOLKSCTAUpsEa+BTNeXOVNkoFTWNMZTqgKDex1TmUHvCJOX3dKuq64CwtwAKw+2EGe40lHxKACfQ1F3XKbCFqzfRAnSIQtYHwzb1FrwCpbjkrelILV0w7GkZlCBqdDB6/iax4XwrxBh6T2DXdUZUlJbXrG5B8hVnjk5YJz9i9dNZp9h4gDeNI1ietYE8rLhpI+jY1etkKCu8oqR5ygKAPv+dLQEOz5kYjbLBu8POmp7jjZyxBOoI367aVK3fN+yurV5h5l5kutOIkZVgSkgQdDJ/N0qUxfC+J7YKU2+1fJI1GRsKTvsghM9NASddqQ8W4ocZUpF9gdokmQom37NRUftBwCZkE6b61bV7kEHwhxmqxQpIaDhKpTKoAkQdhJ+NNi8fx54JW1ZhAMlJDYJg9O+SfkJpJ4TwS9feDlnal4oVIlIKAemYqIToddT0q5G+WuMPJSbjGFNqA9llJETG5SpGb3j8aKW1NklccQYfjl6EpuLdakpJICUoSJPUgHU0muWrzD+QpUh5ChAHtJVIIiOsxtV4q5J3JJJxd0k6k5F6/6WvfC3Jty2xJu4fuEvst/WAkEKU4Iy5kmdAdZzfZFVbTBZPBtk+zZMIuXFOP5AXFKMnMdSJ8Bt7qmqKKqAooooAooooAooooAooooAooooAooooAooooAooooAooooAooooArBeWbbqSh1tK0ndK0gjw2PkaKKA+2lo20gIaQlCEiAlIAA9AKzUUUAUUUUAUUUUAUUUUB/9k=")}),
      Diagram(coordinateSystem(extent = {{-200, -200}, {200, 200}})));
  end Integration_Record_Data_1;
  annotation(
    Icon(coordinateSystem(extent = {{-200, -200}, {200, 200}})),
    Diagram(coordinateSystem(extent = {{-200, -200}, {200, 200}})),
    uses(Modelica(version = "3.2.2")));
end Modelo_Secuencial_Bycicle;
